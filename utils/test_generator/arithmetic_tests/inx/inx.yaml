---
test_suite:
  enable: True
  generator_function: inx_tests.generate_inx
  description: 'INX'
  output_file_name: '/arithmetic/inx.test.js'
  header: |
    /**
      * For these tests, just testing an increment isn't enough, we want to be
      * able to make sure the values rolls back to zero (as per the docs) if the
      * register pair is incremented but are already at 0xFFFF.
      *
      * In the main test `program`, each test starts at 65533, then calls INX
      * once to increment. This leaves us to check we got 65534. To further
      * increment this value we cheat a bit. The `HALT` flag on the CPU is
      * manually switched to false and the call to `ExecuteProgram()` is made
      * again, but this time, with a `from_addr` of 0x04 (the INX OpCode). This
      * way we get to check the first increment worked but then run 4 more of
      * them.
      * 
      * It's hacky, but saves time.
      */

    import { Computer } from '../../core/computer.js'
    import { i8080 } from '../../core/i8080.js'
    import { strict as assert } from 'assert'

    const mvi_opcode_lookup = {
      B: 0x06,
      C: 0x0E,
      D: 0x16,
      E: 0x1E,
      H: 0x26,
      L: 0x2E,
      A: 0x3E
    }
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c._cpu._flagManager.FlagType;


    const program = [
      mvi_opcode_lookup.{register_high_byte},     // Move into {register_high_byte}....
      0xFF,                                       // ...this immediate value
      mvi_opcode_lookup.{register_low_byte},      // Move into {register_low_byte}....
      0xFD,                                       // ...this immediate value
      {opcode},                                   // INX Register
      0x76                                        // HALT
    ]

    c.LoadProgram(program);
    c.ExecuteProgram();
    assert.equal((c.CPUState.Registers.{register_high_byte} << 8) | c.CPUState.Registers.{register_low_byte}, 65534);

    c._cpu._halt = false;
    c.ExecuteProgram(0x04);
    assert.equal((c.CPUState.Registers.{register_high_byte}  << 8) | c.CPUState.Registers.{register_low_byte}, 65535);

    c._cpu._halt = false;
    c.ExecuteProgram(0x04);
    assert.equal((c.CPUState.Registers.{register_high_byte}  << 8) | c.CPUState.Registers.{register_low_byte}, 0);

    c._cpu._halt = false;
    c.ExecuteProgram(0x04);
    assert.equal((c.CPUState.Registers.{register_high_byte}  << 8) | c.CPUState.Registers.{register_low_byte}, 1);
    
    assert.equal(c.CPUState.Clock, 62);

    }});

  tests:

    - test:
      name: Increment 5 times from 65533 and confirm B/C register rolls over to 0 once 8-bit max limit reached
      register_high_byte: B
      register_low_byte: C
      opcode: 0x03

    - test:
      name: Increment 5 times from 65533 and confirm D/E register rolls over to 0 once 8-bit max limit reached
      register_high_byte: D
      register_low_byte: E
      opcode: 0x13

    - test:
      name: Increment 5 times from 65533 and confirm H/L register rolls over to 0 once 8-bit max limit reached
      register_high_byte: H
      register_low_byte: L
      opcode: 0x23

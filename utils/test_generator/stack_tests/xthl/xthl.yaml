# Tests moving data from Memory locations to Register using MOV OpCode
---
test_suite:
  enable: True
  generator_function: xthl_tests.generate_xthl
  description: 'XTHL'
  output_file_name: '/stack/xthl.test.js'
  header: |
    import { Computer } from '../../core/computer.js'
    import { i8080 } from '../../core/i8080.js'
    import { strict as assert } from 'assert'
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c._cpu._flagManager.FlagType;
    
    let program = [
      0x26,                   // MVI into Register H...
      {mem_addr_high_byte},                   // ...This high-byte
      0x2E,                   // MVI into Register L...
      {mem_addr_low_byte},                   // ...This low-byte
      0x36,                   // MVI into memory location (stored in registers H/L)
      {mem_first_byte},                   // ...This byte
      0x2E,                   // MVI into Register L...
      {mem_addr_low_byte}+1,                   // ...This low-byte
      0x36,                   // MVI into memory location (stored in registers H/L)
      {mem_second_byte},                   // ...This byte
      0x31,                   // Load into Stack-pointer
      {mem_addr_low_byte},                   // ...this low-byte (mem addr)
      {mem_addr_high_byte},                   // ...this high-byte (mem_addr)
      0x26,                   // MVI into Register H...
      {h_register},                   // ...This byte
      0x2E,                   // MVI into Register L...
      {l_register},                   // ...This byte
      0x76,                   // HALT (So we can check data is set-up correctly)

      // Phew, now to test

      0xE3,                   // XTHL
      0x76                   // HALT
    ]
    
      c.LoadProgram(program);
      c.ExecuteProgram();

      // Check we're set-up correctly

      assert.equal(c.Bus.ReadRAM({mem_addr_high_byte} << 8 | {mem_addr_low_byte}), {mem_first_byte});
      assert.equal(c.Bus.ReadRAM({mem_addr_high_byte} << 8 | {mem_addr_low_byte} + 1), {mem_second_byte});
      assert.equal(c.CPUState.Registers['H'], 0x0B);
      assert.equal(c.CPUState.Registers['L'], 0x3C);
      
      // Now execute the test

      c._cpu._halt = false;
      c.ExecuteProgram(18);

      assert.equal(c.Bus.ReadRAM({mem_addr_high_byte} << 8 | {mem_addr_low_byte}), {l_register});
      assert.equal(c.Bus.ReadRAM({mem_addr_high_byte} << 8 | {mem_addr_low_byte} + 1), {h_register});
      assert.equal(c.CPUState.Registers['H'], {mem_second_byte});
      assert.equal(c.CPUState.Registers['L'], {mem_first_byte});

    }});

  tests:

    - test: 
      name: Standard exchange (taken from 8080 programmers manual)
      mem_addr_high_byte: 0x10
      mem_addr_low_byte: 0xAD
      h_register: 0x0B
      l_register: 0x3C
      mem_first_byte: 0xF0
      mem_second_byte: 0x0D

# Tests moving data from Memory locations to Register using MOV OpCode
---
test_suite:
  enable: True
  generator_function: push_tests.generate_push_psw
  description: 'PUSH (PSW)'
  output_file_name: '/stack/push.psw.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c.cpu.FlagManager.FlagType;

    let program = [
        0x31,                                             // LXI into Stack pointer
        0xFF,                                             // ...addr low-byte
        0xFF,                                             // ...addr high-byte
        0x3E,                                             // MVI into accumulator
        0xFF,                                             // ...this byte
        0xF5,                                             // PUSH PSW
        0x3E,                                             // MVI into the accumulator... 
        0x00,                                             // ...Zero
        0x76,                                             // HALT
    ]

    {set_carry}
    {set_parity}
    {set_auxillary_carry}
    {set_zero}
    {set_sign}

    c.InjectProgram(program);
    c.ExecuteProgram();
    
    // No Op-Code for this, so set it here
    c.cpu.flags = 0x0;
    
    assert.equal(c.cpu.flags, 0);
    assert.equal(c.cpu.Registers['A'], 0);
    
    // We assign it back to flags so we can use the FlagManager code to check flag status
    c.cpu.flags = c.bus.ReadRAM(c.cpu.StackPointer);
    
    assert.equal(c.bus.ReadRAM(c.cpu.StackPointer+1), 0xFF);

    assert.equal(c.cpu.FlagManager.IsSet(FlagType.Carry), {carry});
    assert.equal(c.cpu.FlagManager.IsSet(FlagType.Parity), {parity});
    assert.equal(c.cpu.FlagManager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
    assert.equal(c.cpu.FlagManager.IsSet(FlagType.Zero), {zero});
    assert.equal(c.cpu.FlagManager.IsSet(FlagType.Sign), {sign});
    
    assert.equal(c.cpu.Clock, 42);

    c.Reset();
    }});
  tests:

    - test: 
      name: No Flags Set
      set_carry: False
      set_parity: False
      set_auxillary_carry: False
      set_zero: False
      set_sign: False
      carry: False
      parity: False
      auxillary_carry: False
      zero: false
      sign: false

    - test: 
      name: All flags set
      set_carry: True
      set_parity: True
      set_auxillary_carry: True
      set_zero: True
      set_sign: True
      carry: True
      parity: True
      auxillary_carry: True
      zero: True
      sign: True

    - test: 
      name: Carry Flag Set
      set_carry: True
      set_parity: False
      set_auxillary_carry: False
      set_zero: False
      set_sign: False
      carry: True
      parity: False
      auxillary_carry: False
      zero: False
      sign: False

    - test: 
      name: Parity Flag Set
      set_carry: False
      set_parity: True
      set_auxillary_carry: False
      set_zero: False
      set_sign: False
      carry: False 
      parity: True
      auxillary_carry: False
      zero: False
      sign: False

    - test: 
      name: Auxillary Carry Flag Set
      set_carry: False
      set_parity: False
      set_auxillary_carry: True
      set_zero: False
      set_sign: False
      carry: False
      parity: False
      auxillary_carry: True
      zero: False
      sign: False

    - test: 
      name: Zero Flag Set
      set_carry: False
      set_parity: False
      set_auxillary_carry: False
      set_zero: True
      set_sign: False
      carry: False
      parity: False
      auxillary_carry: False
      zero: True
      sign: False
  
    - test: 
      name: Sign Flag Set
      set_carry: False
      set_parity: False
      set_auxillary_carry: False
      set_zero: False
      set_sign: True
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: True
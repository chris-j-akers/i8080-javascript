# Tests moving data from Memory locations to Register using MOV OpCode
---
test_suite:
  enable: True
  generator_function: push_tests.generate_push
  description: 'PUSH (R)'
  output_file_name: '/stack/push.reg.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'


    const opcode_lookup = {
        'B': {MVI: 0x06, PUSH: 0xC5},
        'C': {MVI: 0x0E, NOP: 0x00},
        'D': {MVI: 0x16, PUSH: 0xD5},
        'E': {MVI: 0x1E, NOP: 0x00},
        'H': {MVI: 0x26, PUSH: 0xE5},
        'L': {MVI: 0x2E, NOP: 0x00}
    };
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c._cpu.FlagManager.FlagType;

    let program = [
        0x31,                                             // LXI into Stack pointer
        0xFF,                                             // ...addr low-byte
        0xFF,                                             // ...addr high-byte
        opcode_lookup['{register_high}'].MVI,             // MVI into first register...
        0x8F,                                             // ...this byte
        opcode_lookup['{register_low}'].MVI,              // MVI into second register...
        0x9D,                                             // ...this byte
        opcode_lookup['{register_high}'].PUSH,            // PUSH
        0x76                                              // HALT
    ]

        c.InjectProgram(program);
        c.ExecuteProgram();

        assert.equal(c.Bus.ReadRAM(0xFFFF-1), 0x8F);
        assert.equal(c.Bus.ReadRAM(0xFFFF-2), 0x9D);
        assert.equal(c._cpu.StackPointer, 0xFFFF-2);
        assert.equal(c._cpu.Clock, 42);
    }});
  tests:

    - test: 
      name: Push data in B & C onto the Stack
      register_high: B
      register_low: C

    - test: 
      name: Push data in D & E onto the Stack
      register_high: D
      register_low: E

    - test: 
      name: Push data in H & L onto the Stack
      register_high: H
      register_low: L

  

# Tests moving data from Memory locations to Register using MOV OpCode
---
test_suite:
  enable: True
  generator_function: stax_tests.generate_stax
  description: 'STAX'
  output_file_name: '/store/stax.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { strict as assert } from 'assert'

    const mvi_opcode_lookup = {
      B: 0x06,
      C: 0x0E,
      D: 0x16,
      E: 0x1E,
    }

  footer: |
    });
  boilerplate: |
    const max_mem_addr = {max_mem_addr};
    const c = new Computer();

    let program = [
      0x3E,           // MVI into accumulator
      0xFF,           // ...this byte
      null,           // MVI into {high_byte_register}...
      null,           // ...the high-byte of the memory address (ro be inserted)
      null,           // MVI into {low_byte_register}...
      null,           // ... the low-byte of the memory address (to be inserted)
      {opcode},       // Store Accumulator into address held in above register pair
      0x76            // HALT
    ]

    for (let mem_addr = program.length; mem_addr <= max_mem_addr; mem_addr++) {{
      program[2] = mvi_opcode_lookup.{high_byte_register}
      program[3] = (mem_addr >> 8) & 0xFF;
      program[4] = mvi_opcode_lookup.{low_byte_register}
      program[5] = mem_addr & 0xFF;

      c.InjectProgram(program);
      c.ExecuteProgram();

      assert.equal(c.bus.Read(mem_addr), 0xFF);
      assert.equal(c.cpu.Clock, 35);

      c.Reset();

    }}
    }});
  tests:

    - test:
      name: Store Accumulator in address found in registers B,C
      high_byte_register: B
      low_byte_register: C
      opcode: 0x02

    - test:
      name: Store Accumulator in address found in registers D,E
      high_byte_register: D
      low_byte_register: E
      opcode: 0x12

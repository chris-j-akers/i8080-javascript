---
test_suite:
  enable: True
  generator_function: xra_tests.generate_xra_reg
  description: 'XRA Register'
  output_file_name: '/logical/xra.reg.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

    const opcode_lookup = {
        'B': {MVI: 0x06, XRA: 0xA8},
        'C': {MVI: 0x0E, XRA: 0xA9},
        'D': {MVI: 0x16, XRA: 0xAA},
        'E': {MVI: 0x1E, XRA: 0xAB},
        'H': {MVI: 0x26, XRA: 0xAC},
        'L': {MVI: 0x2E, XRA: 0xAD}
    };

  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c._cpu._flagManager.FlagType;


    let program = [
        0x3E,                 // MVI into the accumulator...
        {accumulator},        // ... this immediate value
        null,                 // MVI into register ...
        {data},               // ...this immediate value
        null,                 // XRA
        0x76                  // HALT
      ]

    for (let reg of Object.keys(c.CPUState.Registers).filter((register) => register != 'A')) {{

      program[2] = opcode_lookup[reg].MVI;
      program[4] = opcode_lookup[reg].XRA;

      c.LoadProgram(program);
      {set_carry}
      c.ExecuteProgram();

      assert.equal(c.CPUState.Registers.A, {expected_result});
      assert.equal(c._cpu._flagManager.IsSet(FlagType.Carry), {carry});
      assert.equal(c._cpu._flagManager.IsSet(FlagType.Parity),{parity});
      assert.equal(c._cpu._flagManager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
      assert.equal(c._cpu._flagManager.IsSet(FlagType.Zero), {zero});
      assert.equal(c._cpu._flagManager.IsSet(FlagType.Sign), {sign});

      assert.equal(c.CPUState.Clock, 25);

      c.Reset();
      }}
    }});

  tests:

    - test:
      name: Reset Carry Flag
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Register        |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 100 | 0x64 | 01100100 | 004 | 0x04 | 00000100 | 004 | 0x04 | 00000100 |       |
        // +-----------------------+-----------------------+-----------------------+-------+
      set_carry: True
      data: 16
      accumulator: 20
      expected_result: 4
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False

    - test:
      name: Set Zero Flag
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Register        |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 255 | 0xFF | 11111111 | 000 | 0x00 | 00000000 | 000 | 0x00 | 00000000 | P|Z   |
        // +-----------------------+-----------------------+-----------------------+-------+
      set_carry: False
      data: 255
      accumulator: 255
      expected_result: 0
      carry: False
      parity: True
      auxillary_carry: False
      zero: True
      sign: False

    - test:
      name: Set Sign Flag
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Register        |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 255 | 0xFF | 11111111 | 127 | 0x7F | 01111111 | 128 | 0x80 | 10000000 | S     |
        // +-----------------------+-----------------------+-----------------------+-------+
      set_carry: False
      data: 255
      accumulator: 127
      expected_result: 128
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: True
 
    - test:
      name: Set Parity Flag
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Register        |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 080 | 0x50 | 01010000 | 085 | 0x55 | 01010101 | 005 | 0x05 | 00000101 | P     |
        // +-----------------------+-----------------------+-----------------------+-------+
      set_carry: False
      data: 80
      accumulator: 85
      expected_result: 5
      carry: False
      parity: True
      auxillary_carry: False
      zero: False
      sign: False
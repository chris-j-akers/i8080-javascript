---
test_suite:
  enable: True
  generator_function: ana_tests.generate_ana_mem
  description: 'ANA Memory'
  output_file_name: '/logical/ana.mem.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'
  footer: |
    });
  boilerplate: |
    const max_mem_addr = {max_mem_addr};
    const c = new Computer();
    const FlagType = i8080.FlagType;

    const data = {data};

    const program = [
      0x3E,                   // MVI into Accumulator
      {accumulator},          // Immediate value (in test config)
      0x26,                   // MOV into H...
      null,                   // ...the high-byte of the memory address (ro be inserted)
      0x2E,                   // MOV into L...
      null,                   // ... the low-byte of the memory address (to be inserted)
      0x36,                   // MOV into the memory address...
      data,                   // ...the data value
      0xA6,                   // ANA data in Memory Location with Accumulator
      0x76                    // Halt Program
    ]

    for (let mem_addr = program.length; mem_addr <= max_mem_addr; mem_addr++) {{
      program[3] = (mem_addr >> 8) & 0xFF;
      program[5] = mem_addr & 0xFF;

      c.inject_program(program);
      {set_carry}
      c.execute_program();

      assert.equal(c.cpu.registers.A, {expected_result});
      assert.equal(c.cpu.flag_set(FlagType.Carry), {carry});
      assert.equal(c.cpu.flag_set(FlagType.Parity),{parity});
      assert.equal(c.cpu.flag_set(FlagType.AuxillaryCarry), {auxillary_carry});
      assert.equal(c.cpu.flag_set(FlagType.Zero), {zero});
      assert.equal(c.cpu.flag_set(FlagType.Sign), {sign});

      c.reset();
      }}
    }});

  tests:

    - test:
      name: Reset Carry Flag
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Memory          |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 100 | 0x64 | 01100100 | 004 | 0x04 | 00000100 | 004 | 0x04 | 00000100 |       |
        // +-----------------------+-----------------------+-----------------------+-------+
      set_carry: True
      data: 100
      accumulator: 4
      expected_result: 4
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False

    - test:
      name: Set Zero Flag
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Memory          |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 255 | 0xFF | 11111111 | 000 | 0x00 | 00000000 | 000 | 0x00 | 00000000 | P|Z   |
        // +-----------------------+-----------------------+-----------------------+-------+
      set_carry: False
      data: 255
      accumulator: 0
      expected_result: 0
      carry: False
      parity: True
      auxillary_carry: False
      zero: True
      sign: False

    - test:
      name: Set Sign Flag
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Memory          |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 255 | 0xFF | 11111111 | 128 | 0x80 | 10000000 | 128 | 0x80 | 10000000 | S     |
        // +-----------------------+-----------------------+-----------------------+-------+
      set_carry: False
      data: 255
      accumulator: 128
      expected_result: 128
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: True
 
    - test:
      name: Set Parity Flag
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Memory          |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 255 | 0xFF | 11111111 | 005 | 0x05 | 00000101 | 005 | 0x05 | 00000101 | P     |
        // +-----------------------+-----------------------+-----------------------+-------+
      set_carry: False
      data: 255
      accumulator: 5
      expected_result: 5
      carry: False
      parity: True
      auxillary_carry: False
      zero: False
      sign: False
---
test_suite:
  enable: True
  generator_function: ana_tests.generate_ana_acc
  description: 'ANA Accumulator'
  output_file_name: '/logical/ana.acc.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = i8080.FlagType;

    let program = [
        0x3E,                 // MVI into the accumulator...
        {accumulator},        // ... this immediate value
        0xA7,                 // ANA value in register  with Accumulator
        0x76                  // HALT
      ]

    for (let reg of Object.keys(c.cpu.registers).filter((register) => register != 'A')) {{

      c.inject_program(program);
      {set_carry}
      c.execute_program();

      assert.equal(c.cpu.registers.A, {expected_result});
      assert.equal(c.cpu.flag_set(FlagType.Carry), {carry});
      assert.equal(c.cpu.flag_set(FlagType.Parity),{parity});
      assert.equal(c.cpu.flag_set(FlagType.AuxillaryCarry), {auxillary_carry});
      assert.equal(c.cpu.flag_set(FlagType.Zero), {zero});
      assert.equal(c.cpu.flag_set(FlagType.Sign), {sign});

      assert.equal(c.cpu.clock, 18);

      c.reset();
      }}
    }});

  tests:

    - test:
      name: Reset Carry Flag
      comment: |
        // +-----------------------+-----------------------+-------+
        // |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-------+
        // | 004 | 0x04 | 00000100 | 004 | 0x04 | 00000100 |       |
        // +-----------------------+-----------------------+-------+
      set_carry: True
      accumulator: 4
      expected_result: 4
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False

    - test:
      name: Set Zero Flag
      comment: |
        // +-----------------------+-----------------------+-------+
        // |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-------+
        // | 000 | 0x00 | 00000000 | 000 | 0x00 | 00000000 |       |
        // +-----------------------+-----------------------+-------+
      set_carry: False
      accumulator: 0
      expected_result: 0
      carry: False
      parity: True
      auxillary_carry: False
      zero: True
      sign: False

    - test:
      name: Set Sign Flag
      comment: |
        // +-----------------------+-----------------------+-------+
        // |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-------+
        // | 128 | 0x80 | 10000000 | 128 | 0x80 | 10000000 | S     |
        // +-----------------------+-----------------------+-------+
      set_carry: False
      accumulator: 128
      expected_result: 128
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: True
 
    - test:
      name: Set Parity Flag
      comment: |
        // +-----------------------+-----------------------+-------+
        // |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-------+
        // | 005 | 0x05 | 00000101 | 005 | 0x05 | 00000101 | P     |
        // +-----------------------+-----------------------+-------+
      set_carry: False
      data: 255
      accumulator: 5
      expected_result: 5
      carry: False
      parity: True
      auxillary_carry: False
      zero: False
      sign: False
# Tests moving data from Memory locations to Register using MOV OpCode
---
test_suite:
  enable: True
  generator_function: ral_tests.generate_ral_multishift
  description: 'RAL (Multishift)'
  output_file_name: '/rotate/ral.multi-shift.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = i8080.FlagType;

    let program = [
      0x3E,           // MVI into accumulator
      170,            // ...this byte
      0x17,           // RAL
      0x76,           // HALT
    ]

      c.inject_program(program);
      c.execute_program();

      assert.equal(c.cpu.flag_set(FlagType.Carry), true);
      assert.equal(c.cpu.registers['A'], 84)

      assert.equal(c.cpu.flag_set(FlagType.Parity), false);
      assert.equal(c.cpu.flag_set(FlagType.AuxillaryCarry), false);
      assert.equal(c.cpu.flag_set(FlagType.Zero), false);
      assert.equal(c.cpu.flag_set(FlagType.Sign), false);

      c.cpu.halt = false;
      c.execute_program(0x02);

      assert.equal(c.cpu.flag_set(FlagType.Carry), false);
      assert.equal(c.cpu.registers['A'], 169)

      assert.equal(c.cpu.flag_set(FlagType.Parity), false);
      assert.equal(c.cpu.flag_set(FlagType.AuxillaryCarry), false);
      assert.equal(c.cpu.flag_set(FlagType.Zero), false);
      assert.equal(c.cpu.flag_set(FlagType.Sign), false);

      c.cpu.halt = false;
      c.execute_program(0x02);

      assert.equal(c.cpu.flag_set(FlagType.Carry), true);
      assert.equal(c.cpu.registers['A'], 82)

      assert.equal(c.cpu.flag_set(FlagType.Parity), false);
      assert.equal(c.cpu.flag_set(FlagType.AuxillaryCarry), false);
      assert.equal(c.cpu.flag_set(FlagType.Zero), false);
      assert.equal(c.cpu.flag_set(FlagType.Sign), false);

      assert.equal(c.cpu.clock, 40);

      c.reset();

    });
    
  tests:

    - test:
      name: Accumulator shifts left from 170 3 times


---
test_suite:
  enable: True
  generator_function: lda_tests.generate_lda
  description: 'LDA'
  output_file_name: '/load/lda.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { strict as assert } from 'assert'

  footer: |
    });
  boilerplate: |
    const max_mem_addr = {max_mem_addr};
    const c = new Computer();

    const data = 0xFF;

    let program = [

      // Prep - Load data into memory location, first
      
      0x26,         // MVI into H register...
      null,         // ...addr high-byte
      0x2E,         // MVI into L register...
      null,         // ...addr low-byte
      0x36,         // MVI into memory location...
      data,         // ...the data.
      
      // Now the test

      0x3A,         // LDA...
      null,         // ...low-byte of address
      null,         // ...high-byte of address
      0x76,         // HALT
    ]

    for (let mem_addr = program.length; mem_addr <= max_mem_addr; mem_addr++) {{
      program[1] = (mem_addr >> 8) & 0xFF;
      program[3] = mem_addr & 0xFF;
      program[7] = mem_addr & 0xFF;
      program[8] = (mem_addr >> 8) & 0xFF;
     
      c.InjectProgram(program);
      c.ExecuteProgram();

      assert.equal(c.Bus.ReadRAM(mem_addr), c._cpu.Registers['A']);
      assert.equal(c._cpu.Clock, 44)
      c.Reset();
    }}
    }});

  tests:

    - test:
      name: LDA data from Memory


---
test_suite:
  enable: True
  generator_function: dcx_tests.generate_dcx_sp
  description: 'DCX'
  output_file_name: '/arithmetic/dcx.stack-pointer.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c._cpu._flagManager.FlagType;


    const program = [
      0x31,       // LXI to set stack-pointer to...
      0x04,       // ...this 16-bit number (low-byte)
      0x00,       // ...this 16-bit number (high-byte)
      0x3B,       // ...decrement stack
      0x76,       // HALT
    ]

    c.LoadProgram(program);
    c.ExecuteProgram();
    assert.equal(c.CPUState.StackPointer, 3);

    c._cpu._halt = false;
    c.ExecuteProgram(0x03);
    assert.equal(c.CPUState.StackPointer, 2);

    c._cpu._halt = false;
    c.ExecuteProgram(0x03);
    assert.equal(c.CPUState.StackPointer, 1);

    c._cpu._halt = false;
    c.ExecuteProgram(0x03);
    assert.equal(c.CPUState.StackPointer, 0);
    
    c._cpu._halt = false;
    c.ExecuteProgram(0x03);
    assert.equal(c.CPUState.StackPointer, 65535);

    assert.equal(c.CPUState.Clock, 70);

    });

  tests:

    - test:
      name: Decrement Stack pointer 5 times from 4 and ensure it rolls to 65535 when decremented at 0.



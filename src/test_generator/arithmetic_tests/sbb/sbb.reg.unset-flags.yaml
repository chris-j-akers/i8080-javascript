---
test_suite:
  enable: True
  generator_function: sbb_tests.generate_sbb_reg
  description: 'SBB Register (Unset All Flags)'
  output_file_name: '/arithmetic/sbb.reg.unset-flags.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

    /**
    * An opcode lookup table allows us to programmatically determine which OpCodes
    * to use, depending on the register being tested. It saves us having to write a
    * separate test per register. Instead we can loop through each one and run the
    * same test.
    */
    const opcode_lookup = {
        'B': {MVI: 0x06, SBB: 0x98},
        'C': {MVI: 0x0E, SBB: 0x99},
        'D': {MVI: 0x16, SBB: 0x9A},
        'E': {MVI: 0x1E, SBB: 0x9B},
        'H': {MVI: 0x26, SBB: 0x9C},
        'L': {MVI: 0x2E, SBB: 0x9D}
    };
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c._cpu.FlagManager.FlagType;

    let program = [
        0x3E,           // MVI into accumulator...
        {accumulator},  // ...this data
        null,           // MVI into register (opcode added, below)
        {data},         // ...this data
        null,           // SBB register (opcode added, below)
        0x76            // HALT
    ]

    for (let reg of Object.keys(c._cpu.Registers).filter((register) => register != 'A')) {{
      program[2] = opcode_lookup[reg].MVI;
      program[4] = opcode_lookup[reg].SBB;

      c._cpu.FlagManager.SetFlag(FlagType.Parity);
      c._cpu.FlagManager.SetFlag(FlagType.AuxillaryCarry);
      c._cpu.FlagManager.SetFlag(FlagType.Zero);
      c._cpu.FlagManager.SetFlag(FlagType.Sign);

      assert.equal(c._cpu.FlagManager.IsSet(FlagType.Parity),true);
      assert.equal(c._cpu.FlagManager.IsSet(FlagType.AuxillaryCarry), true);
      assert.equal(c._cpu.FlagManager.IsSet(FlagType.Zero), true);
      assert.equal(c._cpu.FlagManager.IsSet(FlagType.Sign), true);

      c.InjectProgram(program);
      {set_carry}
      c.ExecuteProgram();

      assert.equal(c._cpu.Registers.A, {expected_result});
      assert.equal(c._cpu.FlagManager.IsSet(FlagType.Carry), {carry});
      assert.equal(c._cpu.FlagManager.IsSet(FlagType.Parity),{parity});
      assert.equal(c._cpu.FlagManager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
      assert.equal(c._cpu.FlagManager.IsSet(FlagType.Zero), {zero});
      assert.equal(c._cpu.FlagManager.IsSet(FlagType.Sign), {sign});

      assert.equal(c._cpu.Clock, 25);

      c.Reset();
    }};
    }});

  tests:

    - test:
      name: Unset All Flags (Carry Bit Unset)
      comment: |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
        // |       Register        |      Accumulator      | Carry |       Expected        | Flags |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
        // | 001 | 0x01 | 00000001 | 032 | 0x20 | 00100000 |     0 | 31 | 0x1F | 000011111 |       |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
      data: 1
      accumulator: 32
      set_carry: False
      expected_result: 31
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False
      
    - test:
      name: Unset All Flags (Carry Bit Set)
      comment: |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
        // |       Register        |      Accumulator      | Carry |       Expected        | Flags |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
        // | 001 | 0x01 | 00000001 | 033 | 0x21 | 00100001 |     0 | 31 | 0x1F | 000011111 |       |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
      data: 1
      accumulator: 33
      set_carry: True
      expected_result: 31
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False

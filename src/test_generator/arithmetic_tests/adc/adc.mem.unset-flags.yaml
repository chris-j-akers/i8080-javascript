---
test_suite:
  enable: True
  generator_function: adc_tests.generate_adc_mem
  description: 'ADC Memory (Unset All Flags)'
  output_file_name: '/arithmetic/adc.mem.unset-flags.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'
  footer: |
    });
  boilerplate: |
    const max_mem_addr = {max_mem_addr};
    const c = new Computer();
    const FlagType = c.cpu._flag_manager.FlagType;


    const data = {data};

    const program = [
      0x3E,                   // MVI into Accumulator
      {accumulator},          // Immediate value (in test config)
      0x26,                   // MVI into H...
      null,                   // ...the high-byte of the memory address (ro be inserted)
      0x2E,                   // MVI into L...
      null,                   // ... the low-byte of the memory address (to be inserted)
      0x36,                   // MVI into the memory address...
      data,                   // ...the data value
      0x8E,                   // Add data in Memory Location to Accumulator
      0x76                    // Halt Program
    ]

    /**
      * Our little test program already takes up some memory,
      * so we start tests after the code.
      */

    for (let mem_addr = program.length; mem_addr <= max_mem_addr; mem_addr++) {{
      program[3] = (mem_addr >> 8) & 0xFF;
      program[5] = mem_addr & 0xFF;

      c.cpu._flag_manager.SetFlag(FlagType.Parity);
      c.cpu._flag_manager.SetFlag(FlagType.AuxillaryCarry);
      c.cpu._flag_manager.SetFlag(FlagType.Zero);
      c.cpu._flag_manager.SetFlag(FlagType.Sign);

      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Parity),true);
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.AuxillaryCarry), true);
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Zero), true);
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Sign), true);

      c.inject_program(program);
      {set_carry}
      c.execute_program();

      assert.equal(c.cpu.registers.A,{expected_result});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Carry), {carry});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Parity), {parity});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Zero), {zero});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Sign), {sign});

      assert.equal(c.cpu.clock, 45);

      c.reset();
      }}
    }});

  tests:

    - test:
      name: Unset All Flags (With Carry Unset)
      comment: |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
        // |       Memory          |      Accumulator      | Carry |       Expected        | Flags |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
        // | 001 | 0x01 | 00000001 | 000 | 0x00 | 00000000 |     0 | 001 | 0x01 | 00000001 |       |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
      data: 1
      accumulator: 0
      set_carry: False
      expected_result: 1
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False
      
    - test:
      name: Unset All Flags (With Carry Set)
      comment: |
          // +-----------------------+-----------------------+-------+-----------------------+-------+
          // |       Memory          |      Accumulator      | Carry |       Expected        | Flags |
          // +-----------------------+-----------------------+-------+-----------------------+-------+
          // | 000 | 0x00 | 00000001 | 000 | 0x00 | 00000000 |     1 | 002 | 0x02 | 00000010 |       |
          // +-----------------------+-----------------------+-------+-----------------------+-------+
      data: 1
      accumulator: 0
      set_carry: True
      expected_result: 2
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False
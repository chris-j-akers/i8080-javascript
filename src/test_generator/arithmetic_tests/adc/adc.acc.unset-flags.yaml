---
test_suite:
  enable: True
  generator_function: adc_tests.generate_adc_acc
  description: 'ADC Accumulator (Unset All Flags)'
  output_file_name: '/arithmetic/adc.acc.unset-flags.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c._cpu.FlagManager.FlagType;


    const program = [
      0x3E,           // MVI into accumulator ...
      {accumulator},  // ...this immediate value
      0x8F,           // ADC A
      0x76            // Halt
    ]

    c._cpu.FlagManager.SetFlag(FlagType.Parity);
    c._cpu.FlagManager.SetFlag(FlagType.AuxillaryCarry);
    c._cpu.FlagManager.SetFlag(FlagType.Zero);
    c._cpu.FlagManager.SetFlag(FlagType.Sign);

    assert.equal(c._cpu.FlagManager.IsSet(FlagType.Parity),true);
    assert.equal(c._cpu.FlagManager.IsSet(FlagType.AuxillaryCarry), true);
    assert.equal(c._cpu.FlagManager.IsSet(FlagType.Zero), true);
    assert.equal(c._cpu.FlagManager.IsSet(FlagType.Sign), true);

    c.InjectProgram(program);
    {set_carry}
    c.ExecuteProgram();

    assert.equal(c._cpu.Registers.A, {expected_result});
    assert.equal(c._cpu.FlagManager.IsSet(FlagType.Carry), {carry});
    assert.equal(c._cpu.FlagManager.IsSet(FlagType.Parity),{parity});
    assert.equal(c._cpu.FlagManager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
    assert.equal(c._cpu.FlagManager.IsSet(FlagType.Zero), {zero});
    assert.equal(c._cpu.FlagManager.IsSet(FlagType.Sign), {sign});

    assert.equal(c._cpu.Clock, 18);
    c.Reset();
    }});

  tests:

    - test:
      name: Unset All Flags (Carry Bit Unset)
      comment: |
        // +-----------------------+-------+-----------------------+-------+
        // |      Accumulator      | Carry |      Expected         | Flags |
        // +-----------------------+-------+-----------------------+-------+
        // | 001 | 0X01 | 00000001 |     0 | 002 | 0x02 | 00000010 |       |
        // +-----------------------+-------+-----------------------+-------+
      accumulator: 1
      set_carry: False
      expected_result: 2
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False
      
    - test:
      name: Unset All Flags and Set Parity (Carry Bit Unset)
      comment: |
        // +-----------------------+-------+-----------------------+-------+
        // |      Accumulator      | Carry |      Expected         | Flags |
        // +-----------------------+-------+-----------------------+-------+
        // | 001 | 0X01 | 00000001 |     1 | 003| 0x03 | 00000011  | P     |
        // +-----------------------+-------+-----------------------+-------+
      accumulator: 1
      set_carry: True
      expected_result: 3
      carry: False

# Can't stop Parity being truthy, here, because we'll always end up with and odd
# number in the Accumulator tests with a Carry, so always an even number of bits.
      parity: True

      auxillary_carry: False
      zero: False
      sign: False
---
test_suite:
  enable: True
  generator_function: dcr_tests.generate_dcr_reg
  description: 'DCR Register'
  output_file_name: '/arithmetic/dcr.reg.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

    /**
    * An opcode lookup table allows us to programmatically determine which OpCodes
    * to use, depending on the register being tested. It saves us having to write a
    * separate test per register. Instead we can loop through each one and run the
    * same test.
    */
    const opcode_lookup = {
        'B': {MVI: 0x06, DCR: 0x05},
        'C': {MVI: 0x0E, DCR: 0x0D},
        'D': {MVI: 0x16, DCR: 0x15},
        'E': {MVI: 0x1E, DCR: 0x1D},
        'H': {MVI: 0x26, DCR: 0x25},
        'L': {MVI: 0x2E, DCR: 0x2D}
    };
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c._cpu.FlagManager.FlagType;

    let program = [
        null,           // MVI into Register (opcode added, below)...
        {data},         // ...this data
        null,           // DCR (opcode added, below)
        0x76            // HALT
    ]

    let carry_set;
    for (let reg of Object.keys(c._cpu.Registers).filter((register) => register != 'A')) {{
        program[0] = opcode_lookup[reg].MVI;
        program[2] = opcode_lookup[reg].DCR;

        carry_set = c._cpu.FlagManager.IsSet(FlagType.Carry);

        c.InjectProgram(program);
        c.ExecuteProgram();

        // Here, we're just checking the carry flag hasn't been touched.
        assert.equal(c._cpu.FlagManager.IsSet(FlagType.Carry), carry_set);

        assert.equal(c._cpu.Registers[reg], {expected_result});
        assert.equal(c._cpu.FlagManager.IsSet(FlagType.Parity),{parity});
        assert.equal(c._cpu.FlagManager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
        assert.equal(c._cpu.FlagManager.IsSet(FlagType.Zero), {zero});
        assert.equal(c._cpu.FlagManager.IsSet(FlagType.Sign), {sign});

        assert.equal(c._cpu.Clock, 19);
        
        c.Reset();
    }};
    }});

  tests:

    - test:
      name: No Flags Set
      data: 32
      expected_result: 31
      parity: False
      auxillary_carry: False
      zero: False
      sign: False
      
      
    - test:
      name: Parity, Aux Carry and Zero Flag Set
      data: 1
      expected_result: 0
      parity: True
      auxillary_carry: True
      zero: True
      sign: False

    - test:
      name: Parity Flag and Auxillary Carry Set
      data: 31
      expected_result: 30
      parity: True
      auxillary_carry: True
      zero: False
      sign: False

    - test:
      name: Aux Carry Flag Set
      data: 125
      expected_result: 124
      parity: False
      auxillary_carry: True
      zero: False
      sign: False


    - test:
      name: Sign Flag Set
      data: 255
      expected_result: 254
      parity: False
      auxillary_carry: True
      zero: False
      sign: True


---
test_suite:
  enable: True
  generator_function: dcr_tests.generate_dcr_mem
  description: 'DCR Memory'
  output_file_name: '/arithmetic/dcr.mem.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'
  footer: |
    });
  boilerplate: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'
  footer: |
    });
  boilerplate: |
    const max_mem_addr = {max_mem_addr};
    const c = new Computer();
    const FlagType = c.cpu._flag_manager.FlagType;


    const data = {data};

    const program = [
      0x26,                   // MVI into H...
      null,                   // ...the high-byte of the memory address (ro be inserted)
      0x2E,                   // MVI into L...
      null,                   // ... the low-byte of the memory address (to be inserted)
      0x36,                   // MVI into the memory address...
      data,                   // ...the data value
      0x35,                   // DCR data in Memory Location
      0x76                    // Halt Program
    ]

    let carry_set;
    for (let mem_addr = program.length; mem_addr <= max_mem_addr; mem_addr++) {{
      program[1] = (mem_addr >> 8) & 0xFF;
      program[3] = mem_addr & 0xFF;

      carry_set = c.cpu._flag_manager.IsSet(FlagType.Carry);

      c.inject_program(program);
      c.execute_program();

      // Here, we're just checking the carry flag hasn't been touched.
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Carry), carry_set);

      assert.equal(c.bus.read(mem_addr),{expected_result});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Parity), {parity});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Zero), {zero});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Sign), {sign});
      
      assert.equal(c.cpu.clock, 41);
      
      c.reset();
      }}
    }});

  tests:

    - test:
      name: No Flags Set
      data: 32
      expected_result: 31
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False
      
      
    - test:
      name: Parity, Aux Carry and Zero Flags Set
      data: 1
      expected_result: 0
      carry: False
      parity: True
      auxillary_carry: True
      zero: True
      sign: False

    - test:
      name: Parity and Auxillary Carry Flag Set
      data: 66
      expected_result: 65
      carry: False
      parity: True
      auxillary_carry: True
      zero: False
      sign: False

    - test:
      name: Aux Carry Flag Set
      data: 125
      expected_result: 124
      carry: False
      parity: False
      auxillary_carry: True
      zero: False
      sign: False


    - test:
      name: Sign Flag Set
      data: 255
      expected_result: 254
      carry: False
      parity: False
      auxillary_carry: True
      zero: False
      sign: True



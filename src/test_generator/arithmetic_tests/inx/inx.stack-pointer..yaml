---
test_suite:
  enable: True
  generator_function: inx_tests.generate_inx_sp
  description: 'INX'
  output_file_name: '/arithmetic/inx.stack-pointer.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c.cpu.FlagManager.FlagType;


    const program = [
      0x31,       // LXI to set stack-pointer to...
      0xFD,       // ...this 16-bit number (low-byte)
      0xFF,       // ...this 16-bit number (high-byte)
      0x33,       // ...increment stack
      0x76,       // HALT
    ]

    c.InjectProgram(program);
    c.ExecuteProgram();
    assert.equal(c.cpu.StackPointer, 65534);

    c.cpu.Halt = false;
    c.ExecuteProgram(0x03);
    assert.equal(c.cpu.StackPointer, 65535);

    c.cpu.Halt = false;
    c.ExecuteProgram(0x03);
    assert.equal(c.cpu.StackPointer, 0);

    c.cpu.Halt = false;
    c.ExecuteProgram(0x03);
    assert.equal(c.cpu.StackPointer, 1);
    
    assert.equal(c.cpu.Clock, 58);

    });

  tests:

    - test:
      name: Increment Stack pointer 4 times from 65533



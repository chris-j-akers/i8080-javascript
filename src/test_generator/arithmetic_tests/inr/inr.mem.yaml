---
test_suite:
  enable: True
  generator_function: inr_tests.generate_inr_mem
  description: 'INR Memory'
  output_file_name: '/arithmetic/inr.mem.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'
  footer: |
    });
  boilerplate: |
    const max_mem_addr = {max_mem_addr};
    const c = new Computer();
    const FlagType = c.cpu._flag_manager.FlagType;


    const data = {data};

    const program = [
      0x26,                   // MVI into H...
      null,                   // ...the high-byte of the memory address (ro be inserted)
      0x2E,                   // MVI into L...
      null,                   // ... the low-byte of the memory address (to be inserted)
      0x36,                   // MVI into the memory address...
      data,                   // ...the data value
      0x34,                   // INR data in Memory Location
      0x76                    // Halt Program
    ]

    /**
      * Our little test program already takes up some memory,
      * so we start tests after the code.
      */

    let carry_set;
    for (let mem_addr = program.length; mem_addr <= max_mem_addr; mem_addr++) {{
      program[1] = (mem_addr >> 8) & 0xFF;
      program[3] = mem_addr & 0xFF;

      carry_set = c.cpu._flag_manager.IsSet(FlagType.Carry);

      c.InjectProgram(program);
      c.ExecuteProgram();

      // Here, we're just checking the carry flag hasn't been touched.
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Carry), carry_set);

      assert.equal(c.bus.Read(mem_addr),{expected_result});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Parity), {parity});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Zero), {zero});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Sign), {sign});
      
      assert.equal(c.cpu.Clock, 41);
      
      c.Reset();
      }}
    }});

  tests:

    - test:
      name: Set no flags
      data: 0
      expected_result: 1
      parity: false
      auxillary_carry: false
      zero: false
      sign: false
 
    - test:
      name: Rollover from 255 (Set Parity, AC and Zero flags)
      data: 255
      expected_result: 0
      parity: True
      auxillary_carry: True
      zero: True
      sign: False

    - test:
      name: Set Parity Flag
      data: 84
      expected_result: 85
      parity: True
      auxillary_carry: False
      zero: False
      sign: False

    - test:
      name: Set Sign Flag
      data: 175
      expected_result: 176
      parity: False
      auxillary_carry: True
      zero: False
      sign: True

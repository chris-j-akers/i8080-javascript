---
test_suite:
  enable: True
  generator_function: inr_tests.generate_inr_reg
  description: 'INR R'
  output_file_name: '/arithmetic/inr.reg.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

    /**
    * An opcode lookup table allows us to programmatically determine which OpCodes
    * to use, depending on the register being tested. It saves us having to write a
    * separate test per register. Instead we can loop through each one and run the
    * same test.
    */
    const opcode_lookup = {
        'B': {MVI: 0x06, INR: 0x04},
        'C': {MVI: 0x0E, INR: 0x0C},
        'D': {MVI: 0x16, INR: 0x14},
        'E': {MVI: 0x1E, INR: 0x1C},
        'H': {MVI: 0x26, INR: 0x24},
        'L': {MVI: 0x2E, INR: 0x2C}
    };
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c.cpu._flag_manager.FlagType;


    let program = [
        null,
        {data},
        null,
        0x76            // HALT
    ]

    let carry_set;
    for (let reg of Object.keys(c.cpu.registers).filter((register) => register != 'A')) {{
        program[0] = opcode_lookup[reg].MVI;
        program[2] = opcode_lookup[reg].INR;

        carry_set = c.cpu._flag_manager.IsSet(FlagType.Carry);

        c.inject_program(program);
        c.execute_program();

        // Here, we're just checking the carry flag hasn't been touched.
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.Carry), carry_set);

        assert.equal(c.cpu.registers[reg], {expected_result});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.Parity),{parity});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.Zero), {zero});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.Sign), {sign});

        assert.equal(c.cpu.clock, 19);
        
        c.reset();
    }};
    }});

  tests:

    - test:
      name: Set no flags
      data: 0
      expected_result: 1
      parity: false
      auxillary_carry: false
      zero: false
      sign: false
 
    - test:
      name: Rollover from 255 (Set Parity, AC and Zero flags)
      data: 255
      expected_result: 0
      parity: True
      auxillary_carry: True
      zero: True
      sign: False

    - test:
      name: Set Parity Flag
      data: 84
      expected_result: 85
      parity: True
      auxillary_carry: False
      zero: False
      sign: False

    - test:
      name: Set Sign Flag
      data: 175
      expected_result: 176
      parity: False
      auxillary_carry: True
      zero: False
      sign: True

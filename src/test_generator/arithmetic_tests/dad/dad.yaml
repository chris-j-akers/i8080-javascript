---
test_suite:
  enable: True
  generator_function: dad_tests.generate_dad
  description: 'DAD'
  output_file_name: '/arithmetic/dad.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

    const opcode_lookup = {
    'B': {MVI: 0x06, DAD: 0x09},
    'C': {MVI: 0x0E, NOP: 0x00},
    'D': {MVI: 0x16, DAD: 0x19},
    'E': {MVI: 0x1E, NOP: 0x00}
    };

  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c.cpu._flag_manager.FlagType;


    let program = [
      null,          // MVI into High_byte register...
      {high_byte},   // ...this data
      null,          //  MVI into low byte register...
      {low_byte},    // ...this data
      0x26,          // MVI into H...
      {h_reg},       // ... this data
      0x2E,          // MVI into L...
      {l_reg},       // ...this data
      null,          // Call relevant DAD command
      0x76           // HALT

    ]

    let low_reg;
    for (let high_reg of ['B', 'D']) {{

      switch(high_reg) {{
        case 'B':
          low_reg = 'C';
          break;
        case 'D':
          low_reg = 'E';
          break;
      }}
      program[0] = opcode_lookup[high_reg].MVI;
      program[2] = opcode_lookup[low_reg].MVI;
      program[8] = opcode_lookup[high_reg].DAD;

      c.InjectProgram(program);
      c.ExecuteProgram();

      assert.equal((c.cpu.registers['H'] << 8 | c.cpu.registers['L']) & 0xFFFF, {expected_result})
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Carry), {carry})

      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Parity),false);
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.AuxillaryCarry), false);
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Zero), false);
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Sign), false);

      assert.equal(c.cpu.Clock, 45);
      
      c.Reset();
    }};
    }});

  tests:

    - test:
      name: Carry unset and not set
      set_carry: false
      high_byte: 51
      low_byte: 159
      h_reg: 161
      l_reg: 123
      expected_result: 54554
      carry: false

    - test:
      name: Carry unset and set (result rolls to 0 when too large)
      set_carry: false
      high_byte: 128
      low_byte: 0
      h_reg: 128
      l_reg: 0
      expected_result: 0
      carry: true

    - test:
      name: Carry set then unset
      set_carry: true
      high_byte: 170
      low_byte: 170
      h_reg: 0
      l_reg: 0
      expected_result: 43690
      carry: false



---
test_suite:
  enable: True
  generator_function: add_tests.generate_add_reg
  description: 'ADD OpCode Tests (0x80, 0x81, 0x82, 0x83, 0x84, 0x85)'
  output_file_name: '/arithmetic/add.reg.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

    const opcode_lookup = {
        'B': {MVI: 0x06, ADD: 0x80},
        'C': {MVI: 0x0E, ADD: 0x81},
        'D': {MVI: 0x16, ADD: 0x82},
        'E': {MVI: 0x1E, ADD: 0x83},
        'H': {MVI: 0x26, ADD: 0x84},
        'L': {MVI: 0x2E, ADD: 0x85}
    };
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c.cpu._flag_manager.FlagType;


    let program = [
        0x3E, 
        {accumulator},  // MOV A, #{accumulator}
        null,           // Placeholder for relavent MOV opcode (see opcode lookup table)
        {data},         // MOV [R], {data}
        null,           // Placeholder for relavent ADD opcode (see opcode lookup table)
        0x76            // HALT
    ]

    for (let reg of Object.keys(c.cpu.registers).filter((register) => register != 'A')) {{
        program[2] = opcode_lookup[reg].MVI;
        program[4] = opcode_lookup[reg].ADD;

        c.InjectProgram(program);
        c.ExecuteProgram();

        assert.equal(c.cpu.registers.A, {expected_result});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.Carry), {carry});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.Parity),{parity});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.Zero), {zero});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.Sign), {sign});

        assert.equal(c.cpu.Clock, 25);
        
        c.Reset();
    }};
    }});

  tests:

    - test:
      name: Add 1 to the Accumulator and set no flags
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Register        |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 001 | 0x01 | 00000001 | 000 | 0x00 | 00000000 | 001 | 0x01 | 00000001 |       |
        // +-----------------------+-----------------------+-----------------------+-------+
      data: 1
      accumulator: 0
      expected_result: 1
      carry: false
      parity: false
      auxillary_carry: false
      zero: false
      sign: false
 
    - test:
      name: Set Parity and Zero Flags
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Register        |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 000 | 0x00 | 00000000 | 000 | 0x00 | 00000000 | 000 | 0x00 | 00000000 | P|Z   |
        // +-----------------------+-----------------------+-----------------------+-------+
      data: 0
      accumulator: 0
      expected_result: 0
      carry: False
      parity: True
      auxillary_carry: False
      zero: True
      sign: False

    - test:
      name: Set Parity Flag
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Register        |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 084 | 0x54 | 01010100 | 001 | 0x01 | 00000001 | 085 | 0x55 | 01010101 | P     |
        // +-----------------------+-----------------------+-----------------------+-------+
      data: 84
      accumulator: 1
      expected_result: 85
      carry: False
      parity: True
      auxillary_carry: False
      zero: False
      sign: False

    - test:
      name: Set Parity and Aux Carry Flags
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Register        |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 015 | 0x0F | 00001111 | 015 | 0x0F | 00001111 | 030 | 0x1E | 00011110 | P|A   |
        // +-----------------------+-----------------------+-----------------------+-------+
      data: 15
      accumulator: 15
      expected_result: 30
      carry: False
      parity: True
      auxillary_carry: True
      zero: False
      sign: False

    - test:
      name: Set Sign Flag
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Register        |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 064 | 0x40 | 01000000 | 112 | 0x70 | 01110000 | 176 | 0xB0 | 10110000 | S     |
        // +-----------------------+-----------------------+-----------------------+-------+
      data: 64
      accumulator: 112
      expected_result: 176
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: True

    - test:
      name: Set Carry Flag
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Register        |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 192 | 0xC0 | 11000000 | 066 | 0x42 | 01000010 | 002 | 0x02 | 00000010 | C     |
        // +-----------------------+-----------------------+-----------------------+-------+
      data: 192
      accumulator: 66
      expected_result: 2
      carry: True
      parity: False
      auxillary_carry: False
      zero: False
      sign: False
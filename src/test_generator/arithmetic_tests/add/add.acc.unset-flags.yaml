---
test_suite:
  enable: True
  generator_function: add_tests.generate_add_acc
  description: 'ADD Accumulator (Unset All Flags)'
  output_file_name: '/arithmetic/add.acc.unset-flags.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = i8080.FlagType;

    const program = [
      0x3E,           // MVI into accumulator ...
      {accumulator},  // ...this immediate value
      0x87,           // ADD A
      0x76            // Halt
    ]

    c.cpu.set_flag(FlagType.Carry);
    c.cpu.set_flag(FlagType.Parity);
    c.cpu.set_flag(FlagType.AuxillaryCarry);
    c.cpu.set_flag(FlagType.Zero);
    c.cpu.set_flag(FlagType.Sign);

    assert.equal(c.cpu.flag_set(FlagType.Carry), true);
    assert.equal(c.cpu.flag_set(FlagType.Parity),true);
    assert.equal(c.cpu.flag_set(FlagType.AuxillaryCarry), true);
    assert.equal(c.cpu.flag_set(FlagType.Zero), true);
    assert.equal(c.cpu.flag_set(FlagType.Sign), true);

    c.inject_program(program);
    c.execute_program();

    assert.equal(c.cpu.registers.A, {expected_result});
    assert.equal(c.cpu.flag_set(FlagType.Carry), {carry});
    assert.equal(c.cpu.flag_set(FlagType.Parity),{parity});
    assert.equal(c.cpu.flag_set(FlagType.AuxillaryCarry), {auxillary_carry});
    assert.equal(c.cpu.flag_set(FlagType.Zero), {zero});
    assert.equal(c.cpu.flag_set(FlagType.Sign), {sign});
    c.reset();
    }});

  tests:

    - test:
      name: Unset All Flags
      comment: |
        // +-----------------------+-------+-----------------------+-------+
        // |      Accumulator      | Carry |      Expected         | Flags |
        // +-----------------------+-------+-----------------------+-------+
        // | 001 | 0X01 | 00000001 |     0 | 002 | 0x02 | 00000010 |       |
        // +-----------------------+-------+-----------------------+-------+
      accumulator: 1
      expected_result: 2
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False

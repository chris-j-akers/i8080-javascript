---
test_suite:
  enable: True
  generator_function: add_tests.generate_add_acc
  description: 'ADD Accumulator (Unset All Flags)'
  output_file_name: '/arithmetic/add.acc.unset-flags.test.js'
  header: |
    const Source = require('../../i8080');
  footer: |
    });
  boilerplate: |
    const c = new Source.Computer();
    const FlagType = Source.i8080.FlagType;

    c.cpu.registers.A = 0x01;

    c.cpu.set_flag(FlagType.Carry);
    c.cpu.set_flag(FlagType.Parity);
    c.cpu.set_flag(FlagType.AuxillaryCarry);
    c.cpu.set_flag(FlagType.Zero);
    c.cpu.set_flag(FlagType.Sign);

    expect(c.cpu.flag_set(FlagType.Carry)).toBeTruthy();
    expect(c.cpu.flag_set(FlagType.Parity)).toBeTruthy();
    expect(c.cpu.flag_set(FlagType.AuxillaryCarry)).toBeTruthy();
    expect(c.cpu.flag_set(FlagType.Zero)).toBeTruthy();
    expect(c.cpu.flag_set(FlagType.Sign)).toBeTruthy();

    c.cpu.add_reg(c.cpu.registers.A);

    expect(c.cpu.registers.A).toBe({expected_result});
    expect(c.cpu.flag_set(FlagType.Carry)).{carry}();
    expect(c.cpu.flag_set(FlagType.Parity)).{parity}();
    expect(c.cpu.flag_set(FlagType.AuxillaryCarry)).{auxillary_carry}();
    expect(c.cpu.flag_set(FlagType.Zero)).{zero}();
    expect(c.cpu.flag_set(FlagType.Sign)).{sign}();
    }});

  tests:

    - test:
      name: UNSET FLAGS
      comment: |
        // +-----------------------+-------+-----------------------+-------+
        // |      Accumulator      | Carry |      Expected         | Flags |
        // +-----------------------+-------+-----------------------+-------+
        // | 001 | 0X01 | 00000001 |     0 | 002 | 0x02 | 00000010 |       |
        // +-----------------------+-------+-----------------------+-------+
      accumulator: 1
      expected_result: 2
      carry: toBeFalsy
      parity: toBeFalsy
      auxillary_carry: toBeFalsy
      zero: toBeFalsy
      sign: toBeFalsy

---
test_suite:
  enable: True
  generator_function: add_tests.generate_add_reg
  description: 'ADD OpCode Tests (0x80, 0x81, 0x82, 0x83, 0x84, 0x85) With Unset All Flags'
  output_file_name: '/arithmetic/add.reg.unset-flags.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

    /**
    * An opcode lookup table allows us to programmatically determine which OpCodes
    * to use, depending on the register being tested. It saves us having to write a
    * separate test per register. Instead we can loop through each one and run the
    * same test.
    */
    const opcode_lookup = {
        'B': {MVI: 0x06, ADD: 0x80},
        'C': {MVI: 0x0E, ADD: 0x81},
        'D': {MVI: 0x16, ADD: 0x82},
        'E': {MVI: 0x1E, ADD: 0x83},
        'H': {MVI: 0x26, ADD: 0x84},
        'L': {MVI: 0x2E, ADD: 0x85}
    };
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c.cpu.FlagManager.FlagType;


    let program = [
        0x3E, 
        {accumulator},  // MOV A, #{accumulator}
        null,           // Placeholder for relavent MOV opcode (see opcode lookup table)
        {data},         // MOV [R], {data}
        null,           // Placeholder for relavent ADD opcode (see opcode lookup table)
        0x76            // HALT
    ]

    for (let reg of Object.keys(c.cpu.registers).filter((register) => register != 'A')) {{
      program[2] = opcode_lookup[reg].MVI;
      program[4] = opcode_lookup[reg].ADD;

      c.cpu.FlagManager.SetFlag(FlagType.Carry);
      c.cpu.FlagManager.SetFlag(FlagType.Parity);
      c.cpu.FlagManager.SetFlag(FlagType.AuxillaryCarry);
      c.cpu.FlagManager.SetFlag(FlagType.Zero);
      c.cpu.FlagManager.SetFlag(FlagType.Sign);

      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Carry), true);
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Parity),true);
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.AuxillaryCarry), true);
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Zero), true);
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Sign), true);

      c.inject_program(program);
      c.execute_program();

      assert.equal(c.cpu.registers.A, {expected_result});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Carry), {carry});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Parity),{parity});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Zero), {zero});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Sign), {sign});

      assert.equal(c.cpu.clock, 25);

      c.reset();
    }}
    }});

  tests:

    - test:
      name: Unset All Flags
      comment: |
        // +-----------------------+-----------------------+-----------------------+-------+
        // |       Register        |      Accumulator      |       Expected        | Flags |
        // +-----------------------+-----------------------+-----------------------+-------+
        // | 001 | 0x01 | 00000001 | 000 | 0x00 | 00000000 | 001 | 0x01 | 00000001 |       |
        // +-----------------------+-----------------------+-------+-----------------------+
      data: 1
      accumulator: 0
      expected_result: 1
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False
 
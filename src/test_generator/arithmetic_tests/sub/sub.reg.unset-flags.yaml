---
test_suite:
  enable: True
  generator_function: sub_tests.generate_sub_reg
  description: 'SUB Register (Unset All Flags)'
  output_file_name: '/arithmetic/sub.reg.unset-flags.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

    /**
    * An opcode lookup table allows us to programmatically determine which OpCodes
    * to use, depending on the register being tested. It saves us having to write a
    * separate test per register. Instead we can loop through each one and run the
    * same test.
    */
    const opcode_lookup = {
        'B': {MVI: 0x06, SUB: 0x90},
        'C': {MVI: 0x0E, SUB: 0x91},
        'D': {MVI: 0x16, SUB: 0x92},
        'E': {MVI: 0x1E, SUB: 0x93},
        'H': {MVI: 0x26, SUB: 0x94},
        'L': {MVI: 0x2E, SUB: 0x95}
    };
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c.cpu._flag_manager.FlagType;


    let program = [
        0x3E, 
        {accumulator},  // MOV A, #{accumulator}
        null,           // Placeholder for relavent MOV opcode (see opcode lookup table)
        {data},         // MOV [R], {data}
        null,           // Placeholder for relavent SUB opcode (see opcode lookup table)
        0x76            // HALT
    ]

    for (let reg of Object.keys(c.cpu.registers).filter((register) => register != 'A')) {{
      program[2] = opcode_lookup[reg].MVI;
      program[4] = opcode_lookup[reg].SUB;

      c.cpu._flag_manager.SetFlag(FlagType.Carry);
      c.cpu._flag_manager.SetFlag(FlagType.Parity);
      c.cpu._flag_manager.SetFlag(FlagType.AuxillaryCarry);
      c.cpu._flag_manager.SetFlag(FlagType.Zero);
      c.cpu._flag_manager.SetFlag(FlagType.Sign);

      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Carry), true);
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Parity),true);
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.AuxillaryCarry), true);
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Zero), true);
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Sign), true);

      c.inject_program(program);
      c.execute_program();

      assert.equal(c.cpu.registers.A, {expected_result});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Carry), {carry});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Parity),{parity});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Zero), {zero});
      assert.equal(c.cpu._flag_manager.IsSet(FlagType.Sign), {sign});

      assert.equal(c.cpu.clock, 25);

      c.reset();
    }};
    }});

  tests:

    - test:
      name: Unset All Flags
      comment: |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
        // |       Register        |      Accumulator      | Carry |       Expected        | Flags |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
        // | 001 | 0x01 | 00000001 | 032 | 0x20 | 00100000 |     0 | 31 | 0x1F | 000011111 |       |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
      data: 1
      accumulator: 32
      expected_result: 31
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False

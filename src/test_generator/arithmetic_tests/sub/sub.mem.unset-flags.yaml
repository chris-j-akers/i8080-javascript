---
test_suite:
  enable: True
  generator_function: sub_tests.generate_sub_mem
  description: 'SUB Memory (Unset All Flags)'
  output_file_name: '/arithmetic/sub.mem.unset-flags.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'
  footer: |
    });
  boilerplate: |
    const max_mem_addr = {max_mem_addr};
    const c = new Computer();
    const FlagType = c.cpu.FlagManager.FlagType;


    const data = {data};

    const program = [
      0x3E,                   // MVI into Accumulator...
      {accumulator},          // ...this immediate value
      0x26,                   // MVI into H...
      null,                   // ...the high-byte of the memory address of data (to be filled, below)
      0x2E,                   // MVI into L...
      null,                   // ... the low-byte of the memory address of data (to be filled, below)
      0x36,                   // MVI into the memory address...
      data,                   // ...this data
      0x96,                   // SUB M
      0x76                    // HALT
    ]

    /**
      * Our little test program already takes up some memory,
      * so we start tests after the code.
      */

    for (let mem_addr = program.length; mem_addr <= max_mem_addr; mem_addr++) {{
      program[3] = (mem_addr >> 8) & 0xFF;
      program[5] = mem_addr & 0xFF;

      c.cpu.FlagManager.SetFlag(FlagType.Carry);
      c.cpu.FlagManager.SetFlag(FlagType.Parity);
      c.cpu.FlagManager.SetFlag(FlagType.AuxillaryCarry);
      c.cpu.FlagManager.SetFlag(FlagType.Zero);
      c.cpu.FlagManager.SetFlag(FlagType.Sign);

      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Carry), true);
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Parity),true);
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.AuxillaryCarry), true);
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Zero), true);
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Sign), true);

      c.InjectProgram(program);
      c.ExecuteProgram();

      assert.equal(c.cpu.Registers.A,{expected_result});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Carry), {carry});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Parity), {parity});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Zero), {zero});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Sign), {sign});
      
      assert.equal(c.cpu.Clock, 45);

      c.Reset();
      }}
    }});

  tests:

    - test:
      name: Unset All Flags
      comment: |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
        // |       Register        |      Accumulator      | Carry |       Expected        | Flags |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
        // | 001 | 0x01 | 00000001 | 032 | 0x20 | 00100000 |     0 | 31 | 0x1F | 000011111 |       |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
      data: 1
      accumulator: 32
      expected_result: 31
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False
      
---
test_suite:
  enable: True
  generator_function: sub_tests.generate_sub_mem
  description: 'SUB Memory (Unset All Flags)'
  output_file_name: '/arithmetic/sub.mem.test.js'
  header: |
    const Source = require('../../i8080');
  footer: |
    });
  boilerplate: |
    const max_mem_addr = {max_mem_addr};
    const c = new Source.Computer();
    const FlagType = Source.i8080.FlagType;

    const data = {data};

    for (let mem_addr = 0x00; mem_addr <= max_mem_addr; mem_addr++) {{
      c.bus.write(data, mem_addr);
      c.cpu.registers.H = (mem_addr >> 8) & 0xff;
      c.cpu.registers.L = mem_addr & 0xff;
      c.cpu.registers.A = {accumulator};

      c.cpu.set_flag(FlagType.Carry);
      c.cpu.set_flag(FlagType.Parity);
      c.cpu.set_flag(FlagType.AuxillaryCarry);
      c.cpu.set_flag(FlagType.Zero);
      c.cpu.set_flag(FlagType.Sign);

      expect(c.cpu.flag_set(FlagType.Carry)).toBeTruthy();
      expect(c.cpu.flag_set(FlagType.Parity)).toBeTruthy();
      expect(c.cpu.flag_set(FlagType.AuxillaryCarry)).toBeTruthy();
      expect(c.cpu.flag_set(FlagType.Zero)).toBeTruthy();
      expect(c.cpu.flag_set(FlagType.Sign)).toBeTruthy();

      c.cpu.sub_mem();

      expect(c.cpu.registers.A).toEqual({expected_result});
      expect(c.cpu.flag_set(FlagType.Carry)).{carry}();
      expect(c.cpu.flag_set(FlagType.Parity)).{parity}();
      expect(c.cpu.flag_set(FlagType.AuxillaryCarry)).{auxillary_carry}();
      expect(c.cpu.flag_set(FlagType.Zero)).{zero}();
      expect(c.cpu.flag_set(FlagType.Sign)).{sign}();
      c.reset();
    }}
    }});

  tests:

    - test:
      name: Unset All Flags
      comment: |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
        // |       Register        |      Accumulator      | Carry |       Expected        | Flags |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
        // | 001 | 0x01 | 00000001 | 032 | 0x20 | 00100000 |     0 | 31 | 0x1F | 000011111 |       |
        // +-----------------------+-----------------------+-------+-----------------------+-------+
      data: 1
      accumulator: 32
      expected_result: 31
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False
      
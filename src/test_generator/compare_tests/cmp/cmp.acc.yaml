---
test_suite:
  enable: True
  generator_function: cmp_tests.generate_cmp_acc
  description: 'CMP Accumulator Flag'
  output_file_name: '/compare/cmp.acc.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c.cpu._flag_manager.FlagType;


    const program = [
      0x3E,           // MVI into accumulator ...
      {accumulator},  // ...this immediate value
      0xBF,           // CMP A
      0x76            // HALT
    ]

    c.InjectProgram(program);
    c.ExecuteProgram();

    assert.equal(c.cpu.registers.A, {expected_result});
    assert.equal(c.cpu._flag_manager.IsSet(FlagType.Carry), {carry});
    assert.equal(c.cpu._flag_manager.IsSet(FlagType.Parity),{parity});
    assert.equal(c.cpu._flag_manager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
    assert.equal(c.cpu._flag_manager.IsSet(FlagType.Zero), {zero});
    assert.equal(c.cpu._flag_manager.IsSet(FlagType.Sign), {sign});
    
    assert.equal(c.cpu.Clock, 18);


    c.Reset();
    }});

  tests:

    - test:
      name: Zero, AuxCarry, Parity Flags Set 
      accumulator: 1
      expected_result: 1
      carry: False
      parity: True
      auxillary_carry: True
      zero: True
      sign: False

    - test:
      name: Carry, Sign Flags Set
      accumulator: 255
      expected_result: 255
      carry: False
      parity: True
      auxillary_carry: True
      zero: True
      sign: False
      

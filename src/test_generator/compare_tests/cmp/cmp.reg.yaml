---
test_suite:
  enable: True
  generator_function: cmp_tests.generate_cmp_reg
  description: 'CMP Register'
  output_file_name: '/compare/cmp.reg.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'


    const opcode_lookup = {
        'B': {MVI: 0x06, CMP: 0xB8},
        'C': {MVI: 0x0E, CMP: 0xB9},
        'D': {MVI: 0x16, CMP: 0xBA},
        'E': {MVI: 0x1E, CMP: 0xBB},
        'H': {MVI: 0x26, CMP: 0xBC},
        'L': {MVI: 0x2E, CMP: 0xBD}
    };
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c.cpu._flag_manager.FlagType;

    let program = [
        0x3E,           // MVI into accumulator
        {accumulator},  // ...this data
        null,           // MVI into Register (opcode added, below)
        {data},         // ...this data
        null,           // SUB
        0x76            // HALT
    ]

    for (let reg of Object.keys(c.cpu.registers).filter((register) => register != 'A')) {{
        program[2] = opcode_lookup[reg].MVI;
        program[4] = opcode_lookup[reg].CMP;

        c.InjectProgram(program);
        c.ExecuteProgram();

        assert.equal(c.cpu.registers.A, {expected_result});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.Carry), {carry});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.Parity),{parity});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.Zero), {zero});
        assert.equal(c.cpu._flag_manager.IsSet(FlagType.Sign), {sign});

        assert.equal(c.cpu.Clock, 25);

        c.Reset();
    }};
    }});

  tests:

    - test:
      name: No Flags Set
      data: 1
      accumulator: 32
      expected_result: 32
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False
      
      
    - test:
      name: Parity, Aux Carry and Zero Flag Set
      data: 1
      accumulator: 1
      expected_result: 1
      carry: False
      parity: True
      auxillary_carry: True
      zero: True
      sign: False

    - test:
      name: Parity Flag Set
      data: 2
      accumulator: 32
      expected_result: 32
      carry: False
      parity: True
      auxillary_carry: False
      zero: False
      sign: False

    - test:
      name: Aux Carry Flag Set
      data: 3
      accumulator: 127
      expected_result: 127
      carry: False
      parity: False
      auxillary_carry: True
      zero: False
      sign: False


    - test:
      name: Sign Flag Set
      data: 1
      accumulator: 255
      expected_result: 255
      carry: False
      parity: False
      auxillary_carry: True
      zero: False
      sign: True

    - test:
      name: Carry and Sign Flags Set
      data: 10
      accumulator: 5
      expected_result: 5
      carry: True
      parity: False
      auxillary_carry: False
      zero: False
      sign: True

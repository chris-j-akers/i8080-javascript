---
test_suite:
  enable: True
  generator_function: cmp_tests.generate_cmp_reg
  description: 'CMP Register (Unset All Flags)'
  output_file_name: '/compare/cmp.reg.unset-flags.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

    /**
    * An opcode lookup table allows us to programmatically determine which OpCodes
    * to use, depending on the register being tested. It saves us having to write a
    * separate test per register. Instead we can loop through each one and run the
    * same test.
    */
    const opcode_lookup = {
        'B': {MVI: 0x06, CMP: 0xB8},
        'C': {MVI: 0x0E, CMP: 0xB9},
        'D': {MVI: 0x16, CMP: 0xBA},
        'E': {MVI: 0x1E, CMP: 0xBB},
        'H': {MVI: 0x26, CMP: 0xBC},
        'L': {MVI: 0x2E, CMP: 0xBD}
    };
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c.cpu.FlagManager.FlagType;

    let program = [
        0x3E,           // MVI into accumulator
        {accumulator},  // ...this data
        null,           // MVI into Register (opcode added, below)
        {data},         // ...this data
        null,           // SUB
        0x76            // HALT
    ]

    for (let reg of Object.keys(c.cpu.Registers).filter((register) => register != 'A')) {{
      program[2] = opcode_lookup[reg].MVI;
      program[4] = opcode_lookup[reg].CMP;

      c.cpu.FlagManager.SetFlag(FlagType.Carry);
      c.cpu.FlagManager.SetFlag(FlagType.Parity);
      c.cpu.FlagManager.SetFlag(FlagType.AuxillaryCarry);
      c.cpu.FlagManager.SetFlag(FlagType.Zero);
      c.cpu.FlagManager.SetFlag(FlagType.Sign);

      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Carry), true);
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Parity),true);
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.AuxillaryCarry), true);
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Zero), true);
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Sign), true);

      c.InjectProgram(program);
      c.ExecuteProgram();

      assert.equal(c.cpu.Registers.A, {expected_result});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Carry), {carry});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Parity),{parity});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.AuxillaryCarry), {auxillary_carry});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Zero), {zero});
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Sign), {sign});

      assert.equal(c.cpu.Clock, 25);

      c.Reset();
    }};
    }});

  tests:

    - test:
      name: Unset All Flags
      data: 1
      accumulator: 32
      expected_result: 32
      carry: False
      parity: False
      auxillary_carry: False
      zero: False
      sign: False

# Tests moving fata from register to register using the MOV OpCode
---
test_suite:
  enable: True
  generator_function: mvi_tests.generate_mvi_reg
  description: 'MVI Register'
  output_file_name: '/move/mvi.reg.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { strict as assert } from 'assert'
  footer: |
    });
  boilerplate: |
    const c = new Computer();
    
    let program = [
      {opcode},         // MVI into Register
      null,             // ...this data
      0x76              // HALT
    ]

    for (let byte = 0x00; byte <= 0xFF; byte++) {{
      program[1] = byte;

      c.InjectProgram(program);
      c.ExecuteProgram();

      assert.equal(c.cpu.registers.{reg_destination}, byte);
      assert.equal(c.cpu.Clock, 14);
      c.Reset();
    }}
    }});
  tests:

    - test:
      name: 'MVI B'
      reg_destination: 'B'
      opcode: 0x06

    - test:
      name: 'MVI C'
      reg_destination: 'C'
      opcode: 0x0E

    - test:
      name: 'MVI D'
      reg_destination: 'D'
      opcode: 0x16

    - test:
      name: 'MVI E'
      reg_destination: 'E'
      opcode: 0x1E

    - test:
      name: 'MVI H'
      reg_destination: 'H'
      opcode: 0x26

    - test:
      name: 'MVI L'
      reg_destination: 'L'
      opcode: 0x2E
    
    - test:
      name: 'MVI A'
      reg_destination: 'A'
      opcode: 0x3E

# Tests moving data from Memory locations to Register using MOV OpCode
---
test_suite:
  enable: True
  generator_function: mov_tests.generate_mov_mem_to_reg
  description: 'MOV Memory to Register'
  output_file_name: '/move/mov.mem-to-reg.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { strict as assert } from 'assert'
  footer: |
    });
  boilerplate: |
    const max_mem_addr = {max_mem_addr};
    const c = new Computer();
    const data = 0xFFFF;

    let program = [
      0x26,           // MOV into H...
      null,           // ...the high-byte of the memory address (to be inserted)
      0x2E,           // MOV into L...
      null,           // ... the low-byte of the memory address (to be inserted)
      0x36,           // MVI to this address...
      data,           // ...this immediate value
      {opcode},       // MOV from this address in H and L to register        
      0x76            // HALT
    ]

    for (let mem_addr = program.length; mem_addr <= max_mem_addr; mem_addr++) {{
      program[1] = (mem_addr >> 8) & 0xff;
      program[3] = mem_addr & 0xFF;

      c.inject_program(program);
      c.execute_program();

      assert.equal(c.bus.read(mem_addr), c.cpu.registers.{reg_destination});
      c.reset();
    }}
    }});

  tests:

    - test:
      name: 'MOVE B,M'
      reg_destination: 'B'
      opcode: 0x46

    - test:
      name: 'MOVE C,M'
      reg_destination: 'C'
      opcode: 0x4E

    - test:
      name: 'MOVE D,M'
      reg_destination: 'D'
      opcode: 0x56

    - test:
      name: 'MOVE E,M'
      reg_destination: 'E'
      opcode: 0x5E

    - test:
      name: 'MOVE H,M'
      reg_destination: 'H'
      opcode: 0x66

    - test:
      name: 'MOVE L,M'
      reg_destination: 'L'
      opcode: 0x6E

    - test:
      name: 'MOVE A,M'
      reg_destination: 'A'
      opcode: 0x7E

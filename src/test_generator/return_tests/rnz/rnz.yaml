# Tests moving data from Memory locations to Register using MOV OpCode
---
test_suite:
  enable: True
  generator_function: rnz_tests.generate_rnz
  description: 'RNZ'
  output_file_name: '/return/rnz.test.js'
  header: |
    import { Computer } from '../../computer.js'
    import { i8080 } from '../../i8080.js'
    import { strict as assert } from 'assert'

  footer: |
    });
  boilerplate: |
    const c = new Computer();
    const FlagType = c.cpu.FlagManager.FlagType;

    let program = [

      // Store configurable value into the Accumulator

      0x3E,                   // MVI into accumulator
      {accumulator},          // ...this byte

      // Set stack pointer at address 0xFFFE

      0x31,                   // Load stack pointer with...
      0xFE,                   // ..This low-byte
      0xFF,                   // ...and this high-byte

      //  Move 0xAA into Register B and 0xAA into Register C,
      //  then push onto the Stack. (0xAAAA is the return address we will RET to)

      0x06,                   // MVI into register B...
      0xAA,                   // ...This high addr byte
      0x0E,                   // MVI into register C...
      0xAA,                   // ...This low addr byte
      0xC5,                   // PUSH B

      //  Move OpCode 0x76 (HALT) into memory location 0xAAAA (so the test will HALT when it RETS)

      0x26,                   // MVI into Register H...
      0xAA,                   // ...This high-byte
      0x2E,                   // MVI into Register L...
      0xAA,                   // ...This high-byte
      0x36,                   // MVI into memory location (stored in registers H/L)
      0x76,                   // ...OpCode 0x76 (So the program HALTS when the program counter changes on JNZ)

      // Now perform ADD

      0xDE,                   // Add...
      {subtract},                  // ...This immediate value to accumulator

      // And check

      0xC0,                   // RNZ
      0x76,                   // HALT
    ]

      c.InjectProgram(program);
      c.ExecuteProgram();

      assert.equal(c.cpu.Registers['A'], {expected_result})
      assert.equal(c.cpu.FlagManager.IsSet(FlagType.Zero), {zero});
      assert.equal(c.cpu.ProgramCounter, {expected_program_counter});
      assert.equal(c.cpu.Clock, {expected_clock});

      c.Reset();

    }});
    
  tests:

    - test:
      name: Return is 0, program counter is not modified
      accumulator: 10
      subtract: 10
      expected_result: 0
      expected_program_counter: 20
      expected_clock: 85
      zero: true


    - test: 
      name: Return is not 0, program counter is modified
      accumulator: 10
      subtract: 5
      expected_result: 5
      expected_program_counter: 43691
      expected_clock: 91
      zero: false


    